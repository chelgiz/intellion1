# intellion/reverse_simulator.py

from typing import List, Dict


def simulate_path_to_score(hypothesis: dict, match: dict) -> dict:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—á–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥—É (score), –∑–∞–¥–∞–Ω–Ω–æ–º—É –≥–∏–ø–æ—Ç–µ–∑–æ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ plausibility (–æ—Ü–µ–Ω–∫—É –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏).
    """
    winner = hypothesis["winner"]
    score = hypothesis["score"]
    surface = match.get("surface", "Hard")

    explanation = []

    if surface == "Clay":
        explanation.append("–ú–∞—Ç—á –Ω–∞ –≥—Ä—É–Ω—Ç–µ ‚Äî –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —É —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
    elif surface == "Grass":
        explanation.append("–¢—Ä–∞–≤–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–¥–∞—á—É ‚Äî –≤–∞–∂–µ–Ω –ø–µ—Ä–≤—ã–π –º—è—á.")
    elif surface == "Hard":
        explanation.append("–•–∞—Ä–¥ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, —Ä–µ—à–∞–µ—Ç —Ñ–æ—Ä–º–∞.")

    if score in ["2-0", "3-0"]:
        explanation.append("–ß–∏—Å—Ç–∞—è –ø–æ–±–µ–¥–∞ ‚Äî —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è.")
        plausibility = 0.8
    elif score in ["2-1", "3-1", "3-2"]:
        explanation.append("–°–æ–ø–µ—Ä–Ω–∏–∫ –¥–∞–ª –±–æ–π ‚Äî –Ω–æ —Ñ–∞–≤–æ—Ä–∏—Ç –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ.")
        plausibility = 0.65
    else:
        explanation.append("–†–µ–¥–∫–∏–π —Å—á—ë—Ç ‚Äî –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏.")
        plausibility = 0.5

    return {
        "hypothesis": hypothesis,
        "plausibility": plausibility,
        "explanation": explanation
    }


def simulate_from_result(result: dict) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç, –∫–∞–∫ –æ–Ω –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.
    """
    winner = result["winner"]
    score = result["score"]
    surface = result.get("surface", "Unknown")
    explanation = []

    explanation.append(f"üìå –ü–æ–∫—Ä—ã—Ç–∏–µ: {surface}")
    explanation.append(f"üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner} —Å–æ —Å—á—ë—Ç–æ–º {score}")

    if surface == "Clay":
        explanation.append("–ì—Ä—É–Ω—Ç —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∑–∞—Ç—è–∂–Ω—ã–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º.")
    elif surface == "Grass":
        explanation.append("–¢—Ä–∞–≤–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏.")
    elif surface == "Hard":
        explanation.append("–•–∞—Ä–¥ ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ.")

    if isinstance(score, list):
        score_str = ", ".join(score)
    else:
        score_str = score

    if any("6:0" in s or "6:1" in s for s in score_str.split(",")):
        explanation.append("‚ùóÔ∏è –ë—ã–ª–∏ —Å–µ—Ç-–±–æ–ª—Ç—ã ‚Äî —è–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ.")
    if "7:6" in score_str or "6:7" in score_str:
        explanation.append("üéæ –¢–∞–π–±—Ä–µ–π–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ä–∞–≤–Ω—É—é –±–æ—Ä—å–±—É.")
    if len(score_str.split(",")) >= 4:
        explanation.append("üß± –î–æ–ª–≥–∏–π –º–∞—Ç—á ‚Äî —Ñ–∞–∫—Ç–æ—Ä –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏.")

    return "\n".join(explanation)


def generate_set_scores(score: str, winner: str, player1: str, player2: str) -> List[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['6:4', '3:6', '6:3']) –ø–æ –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–æ–º—É —Å—á—ë—Ç—É.
    winner: '1' –∏–ª–∏ '2' ‚Äî –∫—Ç–æ –≤—ã–∏–≥—Ä–∞–ª –º–∞—Ç—á
    """
    sets = []
    set_count = int(score.split("-")[0]) + int(score.split("-")[1])
    w_sets = int(score.split("-")[0]) if winner == "1" else int(score.split("-")[1])
    l_sets = set_count - w_sets

    for i in range(w_sets):
        sets.append("6:4" if winner == "1" else "4:6")
    for i in range(l_sets):
        sets.append("4:6" if winner == "1" else "6:4")

    return sets
