# intellion/intellion_brain.py

import logging
import json

from predictor_wrapper import predict_match
from value_model import calculate_value
from reverse_simulator import simulate_from_result
from error_analyzer import load_log, analyze_errors
from feedback_engine import log_feedback
from risk_guard import is_match_risky

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("IntellionBrain")

VALUE_THRESHOLD = 5.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ value –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö


def value_assessment(prob_model: float, odds: float) -> float:
    return calculate_value(prob_model, odds)


def final_decision(match_data: dict) -> dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑, value –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
    """
    try:
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞: {match_data['player1']} vs {match_data['player2']}")

        # –®–∞–≥ 1: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_result = predict_match(match_data)
        prob = model_result["prob_player1"]

        # –®–∞–≥ 2: –í—ã—á–∏—Å–ª—è–µ–º value
        odds = match_data["odds_player1"]
        value = value_assessment(prob, odds)
        logger.info(f"üß† –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã: {prob:.2f} | –ö—ç—Ñ: {odds} | Value: {value:.2f}")

        if value < VALUE_THRESHOLD:
            return {
                "decision": "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî value –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞",
                "probability": prob,
                "value": value,
                "explanation": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞–¥ –ª–∏–Ω–∏–µ–π"
            }

        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º (–∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –ø—Ä–æ—à–ª–æ–≥–æ –æ–ø—ã—Ç–∞)
        df = load_log()
        surface_stats = {}
        if not df.empty:
            surface_stats = analyze_errors(df)["surface_errors"]

        risk_check = is_match_risky(match_data, model_result, surface_stats)
        if risk_check["is_risky"]:
            logger.warning("üõë –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ ‚Äî –º–∞—Ç—á –ø—Ä–æ–ø—É—â–µ–Ω.")
            logger.warning("–ü—Ä–∏—á–∏–Ω—ã: " + "; ".join(risk_check["reasons"]))
            log_feedback(match_data, model_result, actual_winner="–ü—Ä–æ–ø—É—â–µ–Ω–æ")
            return {
                "decision": "üõë –ü—Ä–æ–ø—É—Å–∫ ‚Äî –≤—ã—Å–æ–∫–∞—è —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å",
                "reasons": risk_check["reasons"],
                "value": value,
                "probability": prob
            }

        # –®–∞–≥ 4: –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        reasoning = simulate_from_result({
            "player1": match_data["player1"],
            "player2": match_data["player2"],
            "surface": match_data.get("surface_type", "Unknown"),
            "score": "2:1",
            "winner": match_data["player1"]
        })

        logger.info("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω —Å –æ–±—Ä–∞—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º")

        # –®–∞–≥ 5: –í–æ–∑–≤—Ä–∞—Ç —Ä–µ—à–µ–Ω–∏—è
        return {
            "decision": "‚úÖ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É ‚Äî value –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            "probability": prob,
            "value": value,
            "explanation": reasoning
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return {
            "decision": "–û—à–∏–±–∫–∞",
            "error": str(e)
        }


# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é
if __name__ == "__main__":
    example_match = {
        "player1": "Carlos Alcaraz",
        "player2": "Daniil Medvedev",
        "surface_type": "Hard",
        "odds_player1": 1.80,
        "odds_player2": 2.00,
        "bo5_match": True
    }

    result = final_decision(example_match)
    print(json.dumps(result, indent=4, ensure_ascii=False))
